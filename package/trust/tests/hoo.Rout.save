
R version 3.0.3 (2014-03-06) -- "Warm Puppy"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
>  library(trust)
> 
>  d <- 5
>  mu <- seq(1:d)
> 
>  objfun <- function(x) {
+      stopifnot(is.numeric(x))
+      stopifnot(length(x) == d)
+      normxsq <- sum(x^2)
+      omnormxsq <- 1 - normxsq
+      if (normxsq >= 1) return(list(value = Inf))
+      f <- sum(x * mu) - log(omnormxsq)
+      g <- mu + 2 * x / omnormxsq
+      B <- 4 * outer(x, x) / omnormxsq^2 + 2 * diag(d) / omnormxsq
+      list(value = f, gradient = g, hessian = B)
+  }
> 
>  whoop <- trust(objfun, rep(0, d), 1, 100, blather = TRUE)
>  whoop$converged
[1] TRUE
>  whoop$gradient
[1] -1.078728e-10 -2.157452e-10 -3.236180e-10 -4.314904e-10 -5.393632e-10
>  length(whoop$r)
[1] 11
>  data.frame(type = whoop$steptype, rho = whoop$rho, change = whoop$preddiff,
+      accept = whoop$accept, r = whoop$r)
        type        rho        change accept      r
1  easy-easy       -Inf -6.416198e+00  FALSE 1.0000
2  easy-easy  0.9988621 -1.791550e+00   TRUE 0.2500
3  easy-easy  0.9384396 -3.139210e+00   TRUE 0.5000
4     Newton -3.7556908 -4.869739e-01  FALSE 1.0000
5     Newton -3.7556908 -4.869739e-01  FALSE 0.2500
6  easy-easy  0.9704735 -2.173390e-01   TRUE 0.0625
7     Newton  0.4808662 -1.207193e-01   TRUE 0.1250
8     Newton  1.1345592 -2.842958e-02   TRUE 0.1250
9     Newton  1.0359755 -1.601431e-03   TRUE 0.1250
10    Newton  1.0021017 -5.063216e-06   TRUE 0.1250
11    Newton  1.0000245 -5.055832e-11   TRUE 0.1250
> 
>  whoop$argument
[1] -0.1178785 -0.2357569 -0.3536354 -0.4715138 -0.5893923
>  1 - sqrt(sum(whoop$argument^2))
[1] 0.12579
>  (whoop$stepnorm / whoop$r)[whoop$accept & whoop$steptype != "Newton"]
[1] 1.0000000 0.9999999 0.9999996
> 
>  mu <- 10 * mu
> 
>  whoop <- trust(objfun, rep(0, d), 1, 100, blather = TRUE)
>  whoop$converged
[1] TRUE
>  whoop$gradient
[1] -3.561595e-12 -7.123191e-12 -1.068656e-11 -1.424638e-11 -1.782041e-11
>  length(whoop$r)
[1] 15
>  data.frame(type = whoop$steptype, rho = whoop$rho, change = whoop$preddiff,
+      accept = whoop$accept, r = whoop$r)
        type         rho        change accept        r
1  easy-easy        -Inf -7.316198e+01  FALSE 1.000000
2  easy-easy  0.99988968 -1.847800e+01   TRUE 0.250000
3  hard-easy  0.99470720 -3.651210e+01   TRUE 0.500000
4  easy-easy        -Inf -6.257015e+01  FALSE 1.000000
5  easy-easy -0.04965656 -1.717315e+01  FALSE 0.250000
6  easy-easy  0.99853785 -4.388951e+00   TRUE 0.062500
7  easy-easy  0.97518694 -8.447947e+00   TRUE 0.125000
8     Newton        -Inf -6.717856e+00  FALSE 0.250000
9  easy-easy -4.26392242 -3.166862e+00  FALSE 0.062500
10 easy-easy  0.99273694 -8.855630e-01   TRUE 0.015625
11 easy-easy  0.85481794 -1.444545e+00   TRUE 0.031250
12    Newton  0.87287500 -1.388610e-02   TRUE 0.062500
13    Newton  1.01813487 -3.855828e-04   TRUE 0.062500
14    Newton  1.00051376 -2.973089e-07   TRUE 0.062500
15    Newton  0.96475045 -1.767610e-13   TRUE 0.062500
> 
>  whoop$argument
[1] -0.1330340 -0.2660681 -0.3991021 -0.5321362 -0.6651702
>  1 - sqrt(sum(whoop$argument^2))
[1] 0.01339309
>  (whoop$stepnorm / whoop$r)[whoop$accept & whoop$steptype != "Newton"]
[1] 1 1 1 1 1 1
> 
>  try(whoop <- trust(objfun, rep(0.5, d), 1, 100, blather = TRUE))
Error in trust(objfun, rep(0.5, d), 1, 100, blather = TRUE) : 
  parinit not feasible
> 
> 
> proc.time()
   user  system elapsed 
  0.138   0.028   0.168 
