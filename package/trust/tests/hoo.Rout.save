
R Under development (unstable) (2015-06-30 r68608) -- "Unsuffered Consequences"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: i686-pc-linux-gnu (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
>  library(trust)
>  options(digits = 3)
> 
>  d <- 5
>  mu <- seq(1:d)
> 
>  objfun <- function(x) {
+      stopifnot(is.numeric(x))
+      stopifnot(length(x) == d)
+      normxsq <- sum(x^2)
+      omnormxsq <- 1 - normxsq
+      if (normxsq >= 1) return(list(value = Inf))
+      f <- sum(x * mu) - log(omnormxsq)
+      g <- mu + 2 * x / omnormxsq
+      B <- 4 * outer(x, x) / omnormxsq^2 + 2 * diag(d) / omnormxsq
+      list(value = f, gradient = g, hessian = B)
+  }
> 
>  whoop <- trust(objfun, rep(0, d), 1, 100, blather = TRUE)
>  whoop$converged
[1] TRUE
>  ceiling(log10(max(abs(whoop$gradient))))
[1] -9
>  length(whoop$r)
[1] 11
>  data.frame(type = whoop$steptype, rho = round(whoop$rho, 2),
+      change = whoop$preddiff, accept = whoop$accept, r = whoop$r)
        type   rho    change accept      r
1  easy-easy  -Inf -6.42e+00  FALSE 1.0000
2  easy-easy  1.00 -1.79e+00   TRUE 0.2500
3  easy-easy  0.94 -3.14e+00   TRUE 0.5000
4     Newton -3.76 -4.87e-01  FALSE 1.0000
5     Newton -3.76 -4.87e-01  FALSE 0.2500
6  easy-easy  0.97 -2.17e-01   TRUE 0.0625
7     Newton  0.48 -1.21e-01   TRUE 0.1250
8     Newton  1.13 -2.84e-02   TRUE 0.1250
9     Newton  1.04 -1.60e-03   TRUE 0.1250
10    Newton  1.00 -5.06e-06   TRUE 0.1250
11    Newton  1.00 -5.06e-11   TRUE 0.1250
> 
>  whoop$argument
[1] -0.118 -0.236 -0.354 -0.472 -0.589
>  1 - sqrt(sum(whoop$argument^2))
[1] 0.126
>  (whoop$stepnorm / whoop$r)[whoop$accept & whoop$steptype != "Newton"]
[1] 1 1 1
> 
>  mu <- 10 * mu
> 
>  whoop <- trust(objfun, rep(0, d), 1, 100, blather = TRUE)
>  whoop$converged
[1] TRUE
>  ceiling(log10(max(abs(whoop$gradient))))
[1] -10
>  length(whoop$r)
[1] 15
>  data.frame(type = whoop$steptype, rho = round(whoop$rho, 2),
+      change = whoop$preddiff, accept = whoop$accept, r = whoop$r)
        type   rho    change accept      r
1  easy-easy  -Inf -7.32e+01  FALSE 1.0000
2  easy-easy  1.00 -1.85e+01   TRUE 0.2500
3  easy-easy  0.99 -3.65e+01   TRUE 0.5000
4  easy-easy  -Inf -6.26e+01  FALSE 1.0000
5  easy-easy -0.29 -1.72e+01  FALSE 0.2500
6  easy-easy  1.00 -4.39e+00   TRUE 0.0625
7  easy-easy  0.98 -8.45e+00   TRUE 0.1250
8     Newton  -Inf -6.72e+00  FALSE 0.2500
9  easy-easy -4.36 -3.17e+00  FALSE 0.0625
10 easy-easy  0.99 -8.86e-01   TRUE 0.0156
11 easy-easy  0.85 -1.44e+00   TRUE 0.0312
12    Newton  0.87 -1.39e-02   TRUE 0.0625
13    Newton  1.02 -3.86e-04   TRUE 0.0625
14    Newton  1.00 -2.97e-07   TRUE 0.0625
15    Newton  1.05 -1.77e-13   TRUE 0.0625
> 
>  whoop$argument
[1] -0.133 -0.266 -0.399 -0.532 -0.665
>  1 - sqrt(sum(whoop$argument^2))
[1] 0.0134
>  (whoop$stepnorm / whoop$r)[whoop$accept & whoop$steptype != "Newton"]
[1] 1 1 1 1 1 1
> 
>  try(whoop <- trust(objfun, rep(0.5, d), 1, 100, blather = TRUE))
Error in trust(objfun, rep(0.5, d), 1, 100, blather = TRUE) : 
  parinit not feasible
> 
> 
> proc.time()
   user  system elapsed 
  0.192   0.040   0.223 
